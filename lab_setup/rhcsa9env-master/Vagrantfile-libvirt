VAGRANTFILE_API_VERSION = "2"
VAGRANT_DISABLE_VBOXSYMLINKCREATE = "1"
file_to_disk1 = './disk-0-1.vdi'
file_to_disk2 = './disk-0-2.vdi'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Use same SSH key for each machine
  config.ssh.insert_key = false
  config.vm.box_check_update = false

  # # Server 2 Configuration
  # config.vm.define "server2" do |server2|
  #   server2.vm.box = "generic/rhel9"
  #    # Network and port forwarding for server2
  #    server2.vm.network :forwarded_port, guest: 22, host: 50026 # Unique port for server2
  #   # server2.vm.hostname = "server2.eight.example.com"

  #   # Networking for libvirt, using libvirt.network for private network
  #   server2.vm.provider "libvirt" do |libvirt|
  #     libvirt.memory = 1024
  #     libvirt.cpus = 1
  #     libvirt.disk_size = '10G'

  #     # Adding secondary disk storage
  #     libvirt.storage :file, size: '5G', disk: '/dev/sdb'
  #     libvirt.storage :file, size: '5G', disk: '/dev/sdc'

  #     # Network setup for static IPs or DHCP
  #     # libvirt.network = "private_network, ip=192.168.55.151"
  #   end

  #   server2.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: [".git/", "disk-0-1.vdi", "disk-0-2.vdi", ".github"]

  #   # Provisioning setup
  #   server2.vm.provision "shell", inline: <<-SHELL
  #     yes | mkfs.ext4 -L extradisk1 /dev/sdb
  #     mkdir /extradisk1
  #     echo 'LABEL=extradisk1 /extradisk1 ext4 defaults 0 0' >> /etc/fstab
  #   SHELL
  #   server2.vm.provision "shell", inline: <<-SHELL
  #     yes | mkfs.ext4 -L extradisk2 /dev/sdc
  #     mkdir /extradisk2
  #     echo 'LABEL=extradisk2 /extradisk2 ext4 defaults 0 0' >> /etc/fstab
  #   SHELL

  #   # Ansible provisioning
  #   server2.vm.provision :ansible_local do |ansible|
  #     ansible.playbook = "/vagrant/playbooks/server2.yml"
  #     ansible.install = false
  #     ansible.compatibility_mode = "2.0"
  #     ansible.inventory_path = "/vagrant/inventory"
  #     ansible.config_file = "/vagrant/ansible.cfg"
  #     ansible.limit = "all"
  #   end

  #   server2.vm.provision :shell, :inline => "reboot", run: "always"
  # end

  # Repo Configuration
  config.vm.define "repo" do |repo|
    repo.vm.box = "generic/rhel9"
    repo.vm.hostname = "repo.example.com"
    # Network and port forwarding for repo
    repo.vm.network :forwarded_port, guest: 22, host: 8080  # Unique port for repo

    # repo.vm.network "private_network", ip: "192.168.55.149"

    repo.vm.provider "libvirt" do |libvirt, override|
      libvirt.memory = 1024
      libvirt.cpus = 1

      # libvirt.numa_nodes = [{ :cpus => "0-1", :memory => 1024, :memAccess => "shared" }]
      libvirt.memorybacking :access, :mode => "shared"
      # Enable forwarding of forwarded_port with id 'ssh'.
      libvirt.forward_ssh_port = true
    end

    repo.vm.provision "setup", type: "shell", preserve_order: true, inline: <<-EOF
          echo "Install OpenSSH"
          yum -y install openssh
    EOF

    # Provisioning for repo server
    repo.vm.provision :shell, :inline => "sudo rm -rf /EMPTY", run: "always"
    repo.vm.provision :shell, :inline => "sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config; sudo systemctl restart sshd;", run: "always"
    repo.vm.provision :shell, :inline => "yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm -y; sudo yum install -y  python3-pip python3-devel httpd sshpass vsftpd", run: "always"
    repo.vm.provision :shell, :inline => " python3 -m pip install -U pip ; python3 -m pip install pexpect; python3 -m pip install ansible", run: "always"

    repo.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: [".git/", "disk-0-1.vdi", "disk-0-2.vdi", ".github"]
  end

  # # Server 1 Configuration
  # config.vm.define "server1" do |server1|
  #   server1.vm.box = "generic/rhel9"

  #   # Network and port forwarding for server1
  #   # server1.vm.network :forwarded_port, guest: 22, host: 50028  # Unique port for server1

  #   # server1.vm.network "private_network", ip: "192.168.55.150"
    

  #   server1.vm.provider "libvirt" do |libvirt|
  #     libvirt.memory = 1024
  #     libvirt.cpus = 1
  #     libvirt.disk_size = '10G'

  #     # Network configuration for server1
  #     libvirt.net_device = "virtio-net-pci"
  #     libvirt.extra_netdev_args = "net=192.168.51.0/24,dhcpstart=192.168.51.150"
  #     # libvirt.network = "private_network, ip=192.168.55.150"
  #     libvirt.libvirt_dir = "/usr/local/share/libvirt"
  #     libvirt.cpu = "max"
  #     libvirt.smp = "cpus=2,sockets=1,cores=2,threads=1"
  #     libvirt.arch = "x86_64"
  #     libvirt.machine = "q35"
  #   end

  #   # Provisioning for server1
  #   server1.vm.provision :ansible_local do |ansible|
  #     ansible.playbook = "/vagrant/playbooks/master.yml"
  #     ansible.install = false
  #     ansible.compatibility_mode = "2.0"
  #     ansible.inventory_path = "/vagrant/inventory"
  #     ansible.config_file = "/vagrant/ansible.cfg"
  #     ansible.limit = "all"
  #   end

  #   server1.vm.provision :shell, :inline => "reboot", run: "always"
  # end
end
